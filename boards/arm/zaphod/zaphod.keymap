/*
 *	QUICKWORD KEYBOARD v3.0
 *	Copyright (c) OCT 2024 Erik Kyren
 *
 *	Note: this keymap config is a prototype for QUICKWORD KEYBOARD(c) on ZMK firmware
 */
 
 /*
 * 	Copyright (c) 2021 Pete Johanson
 *
 * 	SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>


#define DEFAULT 0
#define ONE 1
#define TWO 2
#define THREE 3
#define FOUR 4
#define FIVE 5
#define SIX 6
#define SEVEN 7


// Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer

&lt { 	tapping-term-ms = <200>;
	quick-tap-ms = <115>;
    	global-quick-tap;
	retro-tap;
	};

&mt { 	tapping-term-ms = <125>;
	retro-tap;};



/ {

macros {

            and: and {
                label = "and";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp A &kp N &kp D>;
            };

            the: the {
                label = "the";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp T &kp H &kp E>;
            };
             
            nt: nt {
                label = "nt";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp N &kp APOS &kp T>;
            };

            eh: eh {
                label = "eh";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp E &kp H>;
            };
             
            of: of {
                label = "of";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp O &kp F>;
            };
             
            ve: ve {
                label = "ve";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp APOS &kp V &kp E>;
            };
             
            wh: wh {
                label = "wh";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp W &kp H>;
            };

            er: er {
                label = "er";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp E &kp R>;
            };

            re: re {
                label = "re";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp R &kp E>;
            };




            there: there {
                label = "there";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp T &kp H &kp E &kp R &kp E>;
            };

            their: their {
                label = "their";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp T &kp H &kp E &kp I &kp R>;
            };

            they: they {
                label = "they";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp T &kp H &kp E &kp Y>;
            };

            then: then {
                label = "then";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp T &kp H &kp E &kp N>;
            };

            than: than {
                label = "than";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp T &kp H &kp A &kp N>;
            };

            tho: tho {
                label = "tho";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp T &kp H &kp O>;
            };

            those: those {
                label = "those";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp T &kp H &kp O &kp S &kp E>;
            };

            aposre: aposre {
                label = "aposre";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp APOS &kp R &kp E>;
            };

            aposve: aposve {
                label = "aposve";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp APOS &kp V &kp E>;
            };

            aposs: aposs {
                label = "aposs";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp APOS &kp S>;
            };

            aposm: aposm {
                label = "aposm";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp APOS &kp M>;
            };

            apost: apost {
                label = "apost";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp APOS &kp T>;
            };


	copy: copy {
		label= "copy";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings
		=  <&macro_tap &kp LC(C)>;
	};

	cut: cut {
		label= "cut";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings
		=  <&macro_tap &kp LC(X)>;
	};
	
	paste: paste {
		label= "paste";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings
		=  <&macro_tap &kp LC(V)>;
	};

	undo: undo {
		label= "undo";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings
		=  <&macro_tap &kp LC(Z)>;
	};

	redo: redo {
		label= "redo";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings
		=  <&macro_tap &kp LC(Y)>;
	};

	homeshft: homeshft {
		label= "homeshft";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings
		=  <&macro_tap &kp LS(HOME)>;
	};

	endshft: endshft {
		label= "closeit";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings
		=  <&macro_tap &kp LS(END)>;
	};

	closeit: closeit {
		label= "closeit";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings
		=  <&macro_tap &kp LC(W)>;
	};

	screen: screen {
		label= "screen";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings
		=  <&macro_press &kp LGUI &kp RSHFT>
		, <&macro_tap &kp S>
		, <&macro_release &kp LGUI &kp RSHFT>;
	}; 
 };






combos {
	compatible = "zmk,combos";


            ///COMBO_CODES
            ///by: Erik Kyren
            ///OCT 2024  

///LEFT HAND HOMEROW CHORDS BFDLVM

	b_combo {
                timeout-ms = <60>;
                key-positions = <10 11>;
                bindings = <&kp B>;
            };

	f_combo {
                timeout-ms = <60>;
                key-positions = <11 12>;
                bindings = <&kp F>;
            };

	d_combo {
                timeout-ms = <60>;
                key-positions = <12 13>;
                bindings = <&kp D>;
            };

	l_combo {
                timeout-ms = <60>;
                key-positions = <11 13>;
                bindings = <&kp L>;
            };

	U_combo {
                timeout-ms = <60>;
                key-positions = <10 13>;
                bindings = <&kp U>;
            };

	m_combo {
                timeout-ms = <60>;
                key-positions = <11 12 13>;
                bindings = <&td_m>;
            };


///RIGHT HAND HOMEROW CHORDS HCJRUW

	h_combo {
                timeout-ms = <60>;
                key-positions = <16 17>;
                bindings = <&kp H>;
	};

	c_combo {
                timeout-ms = <60>;
                key-positions = <17 18>;
                bindings = <&kp C>;
	};

	j_combo {
                timeout-ms = <60>;
                key-positions = <18 19>;
                bindings = <&kp J>;
	};

	r_combo {
                timeout-ms = <60>;
                key-positions = <16 18>;
                bindings = <&kp R>;
	};

	v_combo {
                timeout-ms = <60>;
                key-positions = <16 19>;
                bindings = <&lt 3 V>;
	};

	w_combo {
                timeout-ms = <60>;
                key-positions = <16 17 18>;
                bindings = <&kp W>;
	};


///CHORDS FOR SYMBOLS




	dollar_combo {
                timeout-ms = <60>;
                key-positions = <1 2>;
                bindings = <&kp DLLR>;
            };

	at_combo {
                timeout-ms = <60>;
                key-positions = <2 3>;
                bindings = <&kp AT>;
            };

	hypen_combo {
                timeout-ms = <60>;
                key-positions = <6 7>;
                bindings = <&kp MINUS>;
            };

	underscore_combo {
                timeout-ms = <60>;
                key-positions = <7 8>;
                bindings = <&kp UNDER>;
            };

	plus_combo {
                timeout-ms = <60>;
                key-positions = <8 9>;
                bindings = <&kp PLUS>;
            };

	bang_combo {
                timeout-ms = <60>;
                key-positions = <3 6>;
                bindings = <&kp EXCL>;
            };

	apos_combo {
                timeout-ms = <60>;
                key-positions = <13 16>;
	                bindings = <&kp APOS >;
	};

	quote_combo {
                timeout-ms = <60>;
                key-positions = <10 19>;
                bindings = <&kp DQT>;
            };

/// CHORDS FOR CONTROL

	escape_combo {
                timeout-ms = <60>;
                key-positions = <0 1>;
                bindings = <&kp ESCAPE>;
            };

};


behaviors {


            ///BEHAVIORS
            ///by: Erik Kyren
            ///OCT 2024


        td_x: tap_dance_x {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_X";
                #binding-cells = <0>;
                tapping-term-ms = <260>;
                bindings = <&kp X>, <&kp EXCL>;
	};

        td_s: tap_dance_s {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_S";
                #binding-cells = <0>;
                tapping-term-ms = <260>;
                bindings = <&kp S>, <&aposs>;
	};

        td_m: tap_dance_m {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_M";
                #binding-cells = <0>;
                tapping-term-ms = <260>;
                bindings = <&kp M>, <&aposm>;
	};

        td_q: tap_dance_q {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_Q";
                #binding-cells = <0>;
                tapping-term-ms = <260>;
                bindings = <&kp Q>, <&kp QMARK>;
	};

        td_re: tap_dance_re {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_re";
                #binding-cells = <0>;
                tapping-term-ms = <260>;
                bindings = <&re>, <&aposre>;
	}; 

        td_dot: tap_dance_dot {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_DOT";
                #binding-cells = <0>;
                tapping-term-ms = <260>;
                bindings = <&kp PERIOD>, <&kp COMMA>;
	};

        td_their: tap_dance_their {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_THEIR";
                #binding-cells = <0>;
                tapping-term-ms = <260>;
                bindings = <&their>, <&there>;
	};



};


keymap {
	compatible = "zmk,keymap";
        default {
            label = "okay?";
			bindings = <
				&lt 2 N1	&lt 2 N2    	&lt 2 N3	&lt 2 N4	&lt 2 N5    	&lt 1 N6    	&lt 1 N7    	&lt 1 N8	&lt 1 N9	&kp N0		
				&td_s	    	&lt 3 O		&lt 2 A		&lt 3 N		&kp ENTER	&kp BSPC	&lt 4 E	   	&lt 5 T		&lt 6 I		&lt 7 Y
				&kp LCTRL   	&mt LALT Z	&mt LGUI C	&td_q		&kp COMMA  	&kp PERIOD	&kp K 		&mt RGUI P	&mt RALT X	&kp RCTRL
										&mo 1		&kp LSHFT	&kp SPACE	&kp RSHFT
			>;
		};

        one {
            label = "one";
			bindings = <
				&kp LT		&kp LBRC	&kp LBKT	&kp LPAR	&kp BSLH	&none    	&none		&kp UP		&none		&none	
				&kp LALT	&none 		&none		&kp TAB		&trans		&kp BSPC	&kp LEFT	&kp DOWN	&kp RIGHT	&mo 7	
				&none		&redo		&copy		&undo		&none		&none		&none		&paste		&none		&none	
										&none		&none		&kp SPACE	&kp RSHFT
			>;
		};

        two {
            label = "two";
			bindings = <
				&none		&none		&none		&none		&none		&kp FSLH    	&kp RPAR	&kp RBKT	&kp RBRC	&kp GT	
				&none		&none 		&none		&and		&trans		&trans		&none		&none		&none		&none	
				&none		&none		&none		&none		&none		&none		&none		&none		&none		&none	
										&none		&none		&trans		&none
			>;
		};

        three {
            label = "three";
			bindings = <
				&none		&none		&none		&none		&none		&none	    	&none		&none		&none		&none	
				&none		&none		&of		&none		&trans		&trans		&none		&nt		&none		&none		
				&none		&none		&none		&none		&none		&none		&none		&none		&none		&none	
										&none		&none		&trans		&none
			>;
		};

        four {
            label = "four";
			bindings = <
				&none		&none		&none		&none		&none		&none	    	&none		&none		&none		&none	
				&none		&none		&none		&none		&trans		&trans		&none	   	&eh		&er		&none	
				&none		&none		&none		&none		&none		&none		&none		&none		&none		&none	
										&none		&none		&trans		&none
			>;
		};

        five {
            label = "five";
			bindings = <
				&none		&none		&none		&none		&none		&none	    	&none		&none		&none		&none	
				&those		&tho		&than		&then		&trans		&trans		&the	   	&none		&td_their	&they	
				&none		&none		&none		&none		&none		&none		&none		&none		&none		&none	
										&none		&none		&trans		&none
			>;
		};

        six {
            label = "six";
			bindings = <
				&none		&none		&none		&none		&none		&none	    	&none		&none		&none		&none	
				&none		&none		&none		&none		&trans		&trans		&td_re		&none		&none		&none	
				&none		&none		&none		&none		&none		&none		&none		&none		&none		&none	
										&none		&none		&trans		&none
			>;
		};

        seven {
            label = "seven";
			bindings = <
				&kp LT		&kp LBRC	&kp LBKT	&kp LPAR	&kp BSLH	&kp FSLH    	&kp RPAR	&kp RBKT	&kp RBRC	&kp GT	
				&kp STAR	&kp CARET	&kp AMPS	&kp PERCENT	&kp EQUAL	&kp DEL		&aposve	   	&kp TILDE	&kp GRAVE	&none	
				&none		&none		&kp HASH	&none		&kp SEMI	&kp COLON	&none		&kp PIPE	&none		&none	
										&none		&none		&trans		&none
			>;
		};
	};
};
