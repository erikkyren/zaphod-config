/*
 *	QUICKWORD KEYBOARD v3.0
 *	Copyright (c) OCT 2024 Erik Kyren
 *
 *	Note: this keymap config is a prototype for QUICKWORD KEYBOARD(c) on ZMK firmware
 */
 
 /*
 * 	Copyright (c) 2021 Pete Johanson
 *
 * 	SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>


#define DEFAULT 0
#define ONE 1
#define TWO 2
#define THREE 3
#define FOUR 4
#define FIVE 5
#define SIX 6
#define SEVEN 7
#define EIGHT 8

// Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer

&lt { 	tapping-term-ms = <200>;
	quick-tap-ms = <115>;
    	global-quick-tap;
	retro-tap;
	};

&mt { 	tapping-term-ms = <185>;
	retro-tap;};



/ {

macros {

/// BIGRAMS TRIGRAMS WORDS AND SUFFIXES

            and: and {
                label = "and";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp A &kp N &kp D>;
            };

            the: the {
                label = "the";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp T &kp H &kp E>;
            };
             
            nt: nt {
                label = "nt";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp N &kp APOS &kp T>;
            };
             
            of: of {
                label = "of";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp O &kp F>;
            };

            it: it {
                label = "it";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp I &kp T>;
            };             

			nd: nd {
                label = "nd";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp N &kp D>;
            };

            ha: ha {
                label = "ha";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp H &kp A>;
            };             

			he: he {
                label = "he";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp H &kp E>;
            };

            you: you {
                label = "tho";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp Y &kp O &kp U>;
            };

            there: there {
                label = "there";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp T &kp H &kp E &kp R &kp E>;
            };

            their: their {
                label = "their";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp T &kp H &kp E &kp I &kp R>;
            };

            they: they {
                label = "they";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp T &kp H &kp E &kp Y>;
            };

            then: then {
                label = "then";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp T &kp H &kp E &kp N>;
            };

            than: than {
                label = "than";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp T &kp H &kp A &kp N>;
            };

            tho: tho {
                label = "tho";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp T &kp H &kp O>;
            };

            those: those {
                label = "those";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp T &kp H &kp O &kp S &kp E>;
            };

            aposre: aposre {
                label = "aposre";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp APOS &kp R &kp E>;
            };

            aposve: aposve {
                label = "aposve";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp APOS &kp V &kp E>;
            };

            aposs: aposs {
                label = "aposs";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp APOS &kp S>;
            };

            aposm: aposm {
                label = "aposm";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp APOS &kp M>;
            };

            aposd: aposd {
                label = "aposd";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp APOS &kp D>;
            };

/// USEFUL COMMANDS

	copy: copy {
		label= "copy";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings
		=  <&macro_tap &kp LC(C)>;
	};

	cut: cut {
		label= "cut";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings
		=  <&macro_tap &kp LC(X)>;
	};
	
	paste: paste {
		label= "paste";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings
		=  <&macro_tap &kp LC(V)>;
	};

	undo: undo {
		label= "undo";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings
		=  <&macro_tap &kp LC(Z)>;
	};

	redo: redo {
		label= "redo";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings
		=  <&macro_tap &kp LC(Y)>;
	};

	homeshft: homeshft {
		label= "homeshft";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings
		=  <&macro_tap &kp LS(HOME)>;
	};

	endshft: endshft {
		label= "closeit";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings
		=  <&macro_tap &kp LS(END)>;
	};

	closeit: closeit {
		label= "closeit";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings
		=  <&macro_tap &kp LC(W)>;
	};

	screen: screen {
		label= "screen";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings
		=  <&macro_press &kp LGUI &kp RSHFT>
		, <&macro_tap &kp S>
		, <&macro_release &kp LGUI &kp RSHFT>;
	};

	selectall: selectall {
		label= "selectall";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings
		=  <&macro_tap &kp LC(A)>;
	};

	altab: altab {
		label= "altab";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings
		=  <&macro_press &mo 1 &kp LALT>
		, <&macro_tap &kp TAB>
		, <&macro_pause_for_release>
		, <&macro_release &mo 1 &kp LALT>;
	};
	

	
 };






combos {
	compatible = "zmk,combos";


            ///COMBO_CODES
            ///by: Erik Kyren
            ///OCT 2024  

///LEFT HAND HOMEROW CHORDS BFDLVM

	b_combo {
                timeout-ms = <60>;
                key-positions = <10 11>;
                bindings = <&kp B>;
            };

	d_combo {
                timeout-ms = <60>;
                key-positions = <11 12>;
                bindings = <&td_d>;
            };

	i_combo {
                timeout-ms = <60>;
                key-positions = <12 13>;
                bindings = <&kp I>;
            };

	l_combo {
                timeout-ms = <60>;
                key-positions = <11 13>;
                bindings = <&kp L>;
            };

	v_combo {
                timeout-ms = <60>;
                key-positions = <10 13>;
                bindings = <&td_v>;
            };

	m_combo {
                timeout-ms = <60>;
                key-positions = <11 12 13>;
                bindings = <&td_m>;
            };


///RIGHT HAND HOMEROW CHORDS HGJIUW

	h_combo {
                timeout-ms = <60>;
                key-positions = <16 17>;
                bindings = <&kp H>;
	};

	f_combo {
                timeout-ms = <60>;
                key-positions = <17 18>;
                bindings = <&kp F>;
	};

	j_combo {
                timeout-ms = <60>;
                key-positions = <18 19>;
                bindings = <&kp J>;
	};

	g_combo {
                timeout-ms = <85>;
                key-positions = <16 18>;
                bindings = <&kp G>;
	};

	u_combo {
                timeout-ms = <85>;
                key-positions = <16 19>;
                bindings = <&lt 3 U>;
	};

	w_combo {
                timeout-ms = <85>;
                key-positions = <16 17 18>;
                bindings = <&kp W>;
	};


///CHORDS FOR SYMBOLS




	dollar_combo {
                timeout-ms = <60>;
                key-positions = <1 2>;
                bindings = <&kp DLLR>;
            };

	at_combo {
                timeout-ms = <60>;
                key-positions = <2 3>;
                bindings = <&kp AT>;
            };

	hypen_combo {
                timeout-ms = <60>;
                key-positions = <6 7>;
                bindings = <&kp MINUS>;
            };

	underscore_combo {
                timeout-ms = <60>;
                key-positions = <7 8>;
                bindings = <&kp UNDER>;
            };

	plus_combo {
                timeout-ms = <60>;
                key-positions = <8 9>;
                bindings = <&kp PLUS>;
            };

	bang_combo {
                timeout-ms = <60>;
                key-positions = <3 6>;
                bindings = <&kp EXCL>;
            };

	apos_combo {
                timeout-ms = <60>;
                key-positions = <13 16>;
	                bindings = <&kp APOS >;
	};

	quote_combo {
                timeout-ms = <60>;
                key-positions = <10 19>;
                bindings = <&kp DQT>;
            };

/// CHORDS FOR CONTROL

	escape_combo {
                timeout-ms = <60>;
                key-positions = <0 1>;
                bindings = <&gresc>;
            };
			
	thumb_combo {
                timeout-ms = <60>;
                key-positions = <30 33>;
                bindings = <&altab>;
            };
			
	bluteef_combo {
                timeout-ms = <60>;
                key-positions = <0 9 20 29>;
                bindings = <&to 5>;
            };
};



behaviors {

            ///BEHAVIORS
            ///by: Erik Kyren
            ///OCT 2024


        td_x: tap_dance_x {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_X";
                #binding-cells = <0>;
                tapping-term-ms = <360>;
                bindings = <&kp X>, <&kp EXCL>;
	};

        td_s: tap_dance_s {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_S";
                #binding-cells = <0>;
                tapping-term-ms = <360>;
                bindings = <&kp S>, <&aposs>;
	};

        td_m: tap_dance_m {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_M";
                #binding-cells = <0>;
                tapping-term-ms = <360>;
                bindings = <&kp M>, <&aposm>;
	};

        td_v: tap_dance_v {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_V";
                #binding-cells = <0>;
                tapping-term-ms = <360>;
                bindings = <&kp V>, <&aposve>;
	};


        td_d: tap_dance_d {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_D";
                #binding-cells = <0>;
                tapping-term-ms = <360>;
                bindings = <&kp D>, <&aposd>;
	};
	
        td_k: tap_dance_k {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_KZ";
                #binding-cells = <0>;
                tapping-term-ms = <360>;
                bindings = <&kp K>, <&kp Z>;
	};

        td_q: tap_dance_q {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_Q";
                #binding-cells = <0>;
                tapping-term-ms = <360>;
                bindings = <&kp Q>, <&kp QMARK>;
	};

        td_dot: tap_dance_dot {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_DOT";
                #binding-cells = <0>;
                tapping-term-ms = <360>;
                bindings = <&kp PERIOD>, <&kp COMMA>;
	};

        td_their: tap_dance_their {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_THEIR";
                #binding-cells = <0>;
                tapping-term-ms = <360>;
                bindings = <&their>, <&there>;
	};

        lft: left_thumb {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LSHFT>, <&kp HOME>;
            mods = <(MOD_RSFT|MOD_LCTL)>;
			keep-mods = <(MOD_RSFT)>;
    };
		
		rtt: right_thumb {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RSHFT>, <&kp END>;
            mods = <(MOD_LSFT|MOD_RCTL)>;
			keep-mods = <(MOD_LSFT)>;
    };
		
		spct: space_tab {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&kp TAB>;
            mods = <(MOD_LSFT|MOD_LCTL|MOD_LALT|MOD_RSFT|MOD_RCTL|MOD_RALT)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_RSFT|MOD_RCTL|MOD_RALT)>;
    };
	
	    gresc: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp GRAVE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
    };
	
	    period: period_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
    };
	
	    comma: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
    };
};



keymap {
	compatible = "zmk,keymap";
        default {
            label = "y ctrl?";
			bindings = <
				&lt 7 N1	&lt 7 N2   	&lt 7 N3	&lt 7 N4	&lt 7 N5    	&lt 7 N6  	&lt 7 N7 	&lt 7 N8	&lt 7 N9	&lt 7 N0		
				&td_s	    	&lt 3 R		&lt 2 N		&lt 4 T		&kp ENTER	&kp BSPC	&lt 6 A   	&kp E		&lt 3 O		&lt 6 Y
				&kp LCTRL   	&mt LALT Z	&mt LGUI C	&td_q		&period  	&comma		&kp K 		&mt RGUI P	&mt RALT X	&kp RCTRL
										&mo 8		&lft		&spct		&rtt		
			>;
		};
 
        one {
            label = "fungus";
			bindings = <
				&kp F1		&kp F2		&kp F3		&kp F4		&kp F5		&kp F6		&kp F7		&kp F8		&kp F9		&kp F10
				&kp F11		&kp F12		&none		&kp LEFT	&trans		&kp DEL		&kp RIGHT	&none		&none		&none		
				&none		&none		&none		&none		&none		&none		&none		&none		&none		&none	
										&none		&none		&none		&none
			>;
		};

        two {
            label = "move";
			bindings = <
				&none		&none		&none		&none		&none		&none		&none		&kp UP		&none		&none	
				&none		&nd 		&none		&it		&trans		&trans		&kp LEFT	&kp DOWN	&kp RIGHT	&none	
				&none		&none		&none		&none		&none		&none		&none		&none		&none		&none	
										&none		&kp LSHFT	&trans		&none
			>;
		};

        three {
            label = "three";
			bindings = <
				&none		&none		&none		&none		&none		&none	   	&none		&none		&none		&none	
				&none		&none		&and		&nt		&trans		&trans		&none		&of		&aposre		&none		
				&none		&none		&none		&none		&none		&none		&none		&none		&none		&none	
										&none		&none		&trans		&none
			>;
		};

        four {
            label = "'the'";
			bindings = <
				&none		&none		&none		&none		&none		&none	   	&none		&none		&none		&none	
				&those		&none		&then		&none		&trans		&trans		&than	   	&the		&tho		&they	
				&none		&none		&none		&none		&none		&none		&none		&none		&none		&none	
										&none		&none		&trans		&none	
			>;
		};

        five {
            label = "bluteef";
			bindings = <
				&none		&none		&none		&none		&none		&none	   	&none		&bt BT_PRV	&none		&none	
				&none		&none		&none		&none		&trans		&trans		&none	   	&bt BT_NXT	&none		&none	
				&none		&none		&none		&none		&none		&none		&none		&bt BT_CLR	&none		&none	
										&none		&none		&trans		&none
			>;
		};

        six {
            label = "six";
			bindings = <
				&none		&none		&none		&none		&none		&none	   	&none		&none		&none		&none	
				&none		&none		&none		&none		&trans		&kp DEL		&ha		&he		&you		&none	
				&none		&none		&none		&none		&none		&none		&none		&none		&none		&none	
										&none		&none		&trans		&none
			>;
		};

        seven {
            label = "seven";
			bindings = <
				&kp LT		&kp LBRC	&kp LBKT	&kp LPAR	&kp BSLH	&kp FSLH  	&kp RPAR	&kp RBKT	&kp RBRC	&kp GT	
				&none		&none		&none		&kp TILDE	&none		&none		&none		&none		&none		&none		
				&none		&none		&none		&none		&none		&none		&none		&none		&none		&none		
										&none		&none		&trans		&none
			>;
		};

        eight {
            label = "thumb";
			bindings = <
				&none		&none		&kp C_VOL_UP	&none		&none		&none		&none		&kp PG_UP		&none		&none		
				&screen		&none		&kp C_VOL_DN	&none		&none		&closeit	&selectall	&kp PG_DN		&none		&none	
				&kp HOME	&redo		&copy		&undo		&none		&none		&none		&paste			&cut		&kp END
										&none		&none		&trans		&none
			>;
		};
};
};
