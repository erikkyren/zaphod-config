/*
 *	QUICKWORD KEYBOARD v3.0
 *	Copyright (c) OCT 2024 Erik Kyren
 *
 *	Note: this is a prototype for QUICKWORD KEYBOARD(c) on ZMK firmware
 */
 
 /*
 * 	Copyright (c) 2021 Pete Johanson
 *
 * 	SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>


#define DEFAULT 0
#define ONE 1
#define TWO 2
#define THREE 3




// Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer

&lt { 	tapping-term-ms = <200>;
	quick-tap-ms = <115>;
    	global-quick-tap;
	retro-tap;
	};

&mt { 	tapping-term-ms = <125>;
	retro-tap;};



/ {

macros {

            and: and {
                label = "and";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp A &kp N &kp D>;
            };

            the: the {
                label = "the";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp T &kp H &kp E>;
            };

            ch: ch {
                label = "ch";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp C &kp H>;
            };

            id: id {
                label = "id";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp I &kp APOS &kp D>;
            };
             
            im: im {
                label = "im";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp I &kp APOS &kp M>;
            };
             
            in: in {
                label = "in";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp I &kp N>;
            };
             
            nt: nt {
                label = "nt";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp N &kp APOS &kp T>;
            };
             
            of: of {
                label = "of";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp O &kp F>;
            };

            on: on {
                label = "on";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp O &kp N>;
            };
             
            ou: ou {
                label = "ou";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp O &kp U>;
            };
             
            ty: ty {
                label = "ty";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp T &kp Y>;
            };
             
            ve: ve {
                label = "ve";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp APOS &kp V &kp E>;
            };
             
            wh: wh {
                label = "wh";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp W &kp H>;
            };

            er: er {
                label = "er";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp E &kp R>;
            };

            re: re {
                label = "re";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp R &kp E>;
            };

            un: un {
                label = "un";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp U &kp N>;
            };

            aposre: aposre {
                label = "aposre";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp APOS &kp R &kp E>;
            };

            aposs: aposs {
                label = "aposs";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp APOS &kp S>;
            };

            aposm: aposm {
                label = "aposm";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                =  <&macro_tap &kp APOS &kp M>;
            };


	copy: copy {
		label= "copy";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings
		=  <&macro_tap &kp LC(C)>;
	};

	cut: cut {
		label= "cut";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings
		=  <&macro_tap &kp LC(X)>;
	};
	
	paste: paste {
		label= "paste";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings
		=  <&macro_tap &kp LC(V)>;
	};


	homeshft: homeshft {
		label= "homeshft";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings
		=  <&macro_tap &kp LS(HOME)>;
	};

	endshft: endshft {
		label= "closeit";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings
		=  <&macro_tap &kp LS(END)>;
	};

	closeit: closeit {
		label= "closeit";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings
		=  <&macro_tap &kp LC(W)>;
	};

	screen: screen {
		label= "screen";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings
		=  <&macro_press &kp LGUI &kp RSHFT>
		, <&macro_tap &kp S>
		, <&macro_release &kp LGUI &kp RSHFT>;
	}; 
 };






combos {
	compatible = "zmk,combos";


            ///COMBO_CODES
            ///by: Erik Kyren
            ///OCT 2024  

///LEFT HAND HOMEROW CHORDS BFDLVM

	b_combo {
                timeout-ms = <60>;
                key-positions = <10 11>;
                bindings = <&kp B>;
            };

	f_combo {
                timeout-ms = <60>;
                key-positions = <11 12>;
                bindings = <&kp F>;
            };

	d_combo {
                timeout-ms = <60>;
                key-positions = <12 13>;
                bindings = <&kp D>;
            };

	l_combo {
                timeout-ms = <60>;
                key-positions = <11 13>;
                bindings = <&kp L>;
            };

	U_combo {
                timeout-ms = <60>;
                key-positions = <10 13>;
                bindings = <&kp U>;
            };

	m_combo {
                timeout-ms = <60>;
                key-positions = <11 12 13>;
                bindings = <&td_m>;
            };

	bspc_combo {
                timeout-ms = <60>;
                key-positions = <10 11 12 13>;
                bindings = <&kp BSPC>;
            };


///RIGHT HAND HOMEROW CHORDS HCPRUW

	h_combo {
                timeout-ms = <60>;
                key-positions = <16 17>;
                bindings = <&kp H>;
	};

	c_combo {
                timeout-ms = <60>;
                key-positions = <17 18>;
                bindings = <&kp C>;
	};

	p_combo {
                timeout-ms = <60>;
                key-positions = <18 19>;
                bindings = <&kp P>;
	};

	r_combo {
                timeout-ms = <60>;
                key-positions = <16 18>;
                bindings = <&kp R>;
	};

	v_combo {
                timeout-ms = <60>;
                key-positions = <16 19>;
                bindings = <&lt 3 V>;
	};

	w_combo {
                timeout-ms = <60>;
                key-positions = <16 17 18>;
                bindings = <&kp W>;
	};

	enter_combo {
                timeout-ms = <60>;
                key-positions = <16 17 18 19>;
                bindings = <&kp ENTER>;
	};
};


behaviors {


            ///BEHAVIORS
            ///by: Erik Kyren
            ///July 2023


//DOUBLETAP X into !
        td_x: tap_dance_x {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_X";
                #binding-cells = <0>;
                tapping-term-ms = <160>;
                bindings = <&kp X>, <&kp EXCL>;
	};

        td_s: tap_dance_s {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_S";
                #binding-cells = <0>;
                tapping-term-ms = <160>;
                bindings = <&kp S>, <&aposs>;
	};

        td_m: tap_dance_m {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_M";
                #binding-cells = <0>;
                tapping-term-ms = <160>;
                bindings = <&kp M>, <&aposm>;
	};


        td_re: tap_dance_re {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_re";
                #binding-cells = <0>;
                tapping-term-ms = <160>;
                bindings = <&re>, <&aposre>;
	}; 

        td_dot: tap_dance_dot {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_DOT";
                #binding-cells = <0>;
                tapping-term-ms = <160>;
                bindings = <&kp PERIOD>, <&kp COMMA>;
	};

//MOD MORPH MO INTO TAB
	motab: motab_mod_morph {
		compatible = "zmk,behavior-mod-morph";
		label = "MOTAB_MOD_MOPRH";
		#binding-cells = <0>;
		bindings = <&mo 11>, <&kp TAB>;
           	mods = <(MOD_LGUI|MOD_LALT|MOD_LCTL|MOD_LSFT|MOD_RGUI|MOD_RSFT|MOD_RCTL|MOD_RALT)>;
         	keep-mods = <(MOD_LGUI|MOD_LALT|MOD_LCTL|MOD_LSFT|MOD_RGUI|MOD_RSFT|MOD_RCTL|MOD_RALT)>;
	};

};


keymap {
	compatible = "zmk,keymap";
        default {
            label = "greasygoose";
			bindings = <
				&kp N1	 	&kp N2	    	&kp N3		&kp N4		&kp N5    	&kp N6    	&kp N7    	&kp N8		&kp N9		&kp N0		
				&td_s	    	&kp O		&lt 1 A		&lt 1 N		&td_dot		&kp APOS	&lt 2 E	   	&lt 1 T		&lt 3 I		&kp Y
				&kp LCTRL    	&mt LGUI Z	&mt LALT J	&kp G		&none	  	&none		&kp Q 		&mt RALT K	&kp RGUI	&kp RCTRL
										&kp N0		&kp N0		&kp N0		&kp N0
			>;
		};

        one {
            label = "poopygoose";
			bindings = <
				&none		&none		&none		&none		&none		&none	    	&none		&none		&none		&none	
				&none		&none		&none		&and		&none		&none		&the	   	&nt		&none		&none	
				&none		&none		&none		&none		&none		&none		&none		&none		&none		&none	
										&none		&none		&none		&none
			>;
		};

        two {
            label = "dustygoose";
			bindings = <
				&none		&none		&none		&none		&none		&none	    	&none		&none		&none		&none	
				&none		&none		&none		&none		&none		&none		&td_re	   	&none		&er		&none	
				&none		&none		&none		&none		&none		&none		&none		&none		&none		&none	
										&none		&none		&none		&none
			>;
		};

        three {
            label = "muddygoose";
			bindings = <
				&none		&none		&none		&none		&none		&none	    	&none		&none		&none		&none	
				&none		&none		&none		&none		&none		&none		&ve	   	&none		&er		&none	
				&none		&none		&none		&none		&none		&none		&none		&none		&none		&none	
										&none		&none		&none		&none
			>;
		};

	};
};
